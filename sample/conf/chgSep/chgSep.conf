####################
## パラメータを記載
##
## valueは<''>,　<"">で囲むことも可能です。
## パラメータの行頭、行末に半角スペースが必要な場合等に利用してください。
## 行頭行末以外の半角スペースが含まれるものは囲む必要がありません。
####################

## 基本設定
[baseset]

# ワークディレクトリを指定する。
WORK_DIR = C:/tmp/editLogs
# 変換対象ファイルを含むディレクトリを指定する。
# WORK_DIRからの相対パスで指定することをお薦めします。
SOURCE_DIR = ./data/csv
# 変換後ディレクトリを指定する。
# WORK_DIRからの相対パスで指定することをお薦めします。
WRITE_DIR = ./result_csv





## 変換前後のファイルフォーマット等を指定する。
[formatparams]

#
# エンコード指定
# pythonのcodecsに準拠
# https://docs.python.jp/3/library/codecs.html
# 変換不可能な文字が含まれている場合はエラー。
# ※出力ファイルの文字コードをcp932にした場合、「IBM拡張文字」は「NEC選定IBM拡張文字」となります。
#   入力ファイルの文字コードがcp932で「IBM選定IBM拡張文字」が含まれている場合は「NEC選定IBM拡張文字」に変換されます。
INPUT_ENCODE = utf8
OUTPUT_ENCODE = utf8

#
# 区切り文字指定
# COMMA, TAB, SPACE のどれかを選択。
# INPUT_SEPにSPACEを選択した場合のみ、連続するセパレータは1つと解釈される。
#   ex. "foo"   "var"     "hoge"
#         --[SPACE2COMMMA]-> "foo","var","hoge"
#       "foo",,,"var",,"hoge"
#         --[COMMA2SPACE]-> "foo" "var" "hoge"
INPUT_SEP = COMMA
OUTPUT_SEP = TAB

#
# 出力改行コード
# CRLF, LF, CR, FALSE のどれかを選択。FALSEの場合は元ファイルの改行コードに従う。
NEW_LINE = CRLF

#
# 1カラムであることを示す囲み文字。
#
# 囲み文字内に区切り文字が存在しても区切り文字として認識されない。
#   ex. 'fo,o' "va,r" [h,oge] -> OK
#
# 囲み文字の始まりと終わりが異なる場合はエラーとなる。
#   ex. 'fo,o" "va,r' [h,oge"  -> NG
#
# 囲み文字内に区切り文字が無い場合は囲み文字に不整合があってもそのまま出力する。
#   ex. 'foo" "var' [hoge" -> OK
#
# 設定可能なパラメータは以下の通り
#   SINGLE : <''>
#   DOUBLE : <"">
#   QUOTES : <''> + <"">
#   SQUARE_BRACKETS : <[]>
#   ALL : <''> + <""> + <[]>
#   FALSE : 囲み文字処理無し
#
QUOTE = DOUBLE

#
# INPUT_SEPにSPACEを選択した場合の変換対象のカラム数を数値で指定(左から数える)
#   ex. INPUT_SEP_SPACE_COL_CHG_LIMITに3を指定:
#         foo   var   hoge /foo/var/hoge -hoge -var -foo
#      --[SPACEをCOMMMAに変換]---> foo,var,hoge,/foo/var/hoge -hoge -var -foo
# 全カラムを変換対象とする場合はFALSEとする。
INPUT_SEP_SPACE_COL_CHG_LIMIT = FALSE

#
# 日時文字列取得用パラメータ
#
# 正規表現DATE_LINE_REGEXに従って行内に存在する日時に関わる文字列を取得してINPUT_DATE_FORMATで日付型に変換し、
# 該当行及び以降の行の行頭にOUTPUT_DATE_FORMATの形式で日時を付与する。
#   ex. foo var 21/Aug/2017:10:10:10 hoge var foo
#       foo var hoge hoge var foo
#        -> 2017/08/21 10:10:10,foo,var,21/Aug/2017:10:10:10,hoge,var,foo
#           2017/08/21 10:10:10,foo,var,hoge,hoge,var,foo
#
# 使用しない場合はDATE_LINE_REGEXを空白とする。
# DATE_FORMATの形式はpythonのdatetimeに準拠
# https://docs.python.jp/3/library/datetime.html
DATE_LINE_REGEX =
INPUT_DATE_FORMAT =
OUTPUT_DATE_FORMAT =

#
# 抽出用正規表現
# 正規表現に一致する文字列を含む行のみ出力する。
# 使用しない場合は空白とする。
EXTRACT_ON_REGEX =





## ログ出力設定
[logging]

# ログ出力パス指定
# WORK_DIRからの相対パスで指定することをお薦めします。
PATH = ./editLogs.log

# ログ出力文字コード
ENCODING = utf8

# 日時フォーマット
# asctimeではミリ秒を表示せず、msecsで付与する。
DATE_FMT = %Y/%m/%d %H:%M:%S

# コンソール向けログフォーマット
# ミリ秒は[,]でなく[.]区切りにする。(Excelに合わせて・・・)
FORMAT_CONSOLE = %(asctime)s.%(msecs)d : %(name)s : %(levelname)s : %(lineno)d : "%(message)s"

# ファイル向けログフォーマット
# ファイル出力はタブ区切りにする。(Excelに貼付しやすいように・・・)
# ミリ秒は[,]でなくtab区切りにする。(Excelで操作しやすいように・・・)
FORMAT_FILE =  "%(asctime)s"	"%(msecs)d"	"%(name)s"	"%(levelname)s"	"%(lineno)d"	"%(message)s"


